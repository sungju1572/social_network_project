}else{
tabsetPanel(
type='tabs',
tabPanel(title='profile',tableOutput(outputId='profile')),
tabPanel(title='plot1',plotOutput(outputId='histogram')),
tabPanel(title='plot2',plotOutput(outputId='boxplot')))
}
})
}
shinyApp(ui=ui,server=server)
ui <- fluidPage(
sidebarPanel(
textInput(inputId="name",
label="이름을 입력하세요.",
value="홍길동"),
numericInput(inputId="ht",
label=h4("키(cm)을 입력하세요."),
value=172.4,min=50,max=250),
sliderInput(inputId="age",
label="나이를 입력하세요.",
value=25,
min=1,
max=120,
step=1),
sliderInput(inputId='sample',
label='샘플 크기를 입력하세요.',
value=1000,
min=100,
max=5000,
step=100),
varSelectInput(inputId='vars',
label='칼럼을 선택하세요.',
data=iris,selected='Sepal.Length',
multiple=TRUE)),
mainPanel(
uiOutput(outputId='mainUI')
)
)
server <- function(input,output,session){
output$profile <- renderTable({
data.frame(name=input$name,height=input$ht,age=input$age)
})
output$histogram <- renderPlot({
heights <- rnorm(n=input$ht,mean=172.4,sd=5.7)
hist(x=heights,breaks=20,col='gray50',border='gray30')
})
output$boxplot <- renderPlot({
ggplot(data=iris,mapping=aes(y=!!input$vars[[1]]))+ # !!는 shiny에서 지정한 데이터를 R로 사용하겠다
geom_boxplot()+theme_bw()
})
output$mainUI <- renderUI({
if(input$name=='홍길동'){
tagList(
h5('[안내] 입력하시는 내용으로 변경됩니다.'),
tabPanel(title='profile',tableOutput(outputId='profile'))
)
}else{
tabsetPanel(
type='tabs',
tabPanel(title='profile',tableOutput(outputId='profile')),
tabPanel(title='plot1',plotOutput(outputId='histogram')),
tabPanel(title='plot2',plotOutput(outputId='boxplot')))
}
})
}
shinyApp(ui=ui,server=server)
shinyApp(ui = ui, server = server)
# input layout
ui <- fluidPage(
# 사이드 패널
sidebarPanel(
textInput( inputId = "name",
label = "이름을 입력하세요.",
value = "홍길동"),
passwordInput( inputId = "pw",
label = "비밀번호를 입력하세요.",
placeholder = "타인에게 노출되지 않도록 주의하세요"),
textAreaInput( inputId = "intro",
label = h3('자기소개 부탁합니다.'),
value = '',
row=3,
placeholder = "간단하게 작성해주세요."),
numericInput( inputId = "ht",
label = h4('키(cm)를 입력하세요.'),
value = 172.4,
min = 50,
max = 250 ),
sliderInput( inputId = "age",
label = "나이를 입력하세요.",
value = 25,
min = 1,
max = 120,
step = 1),
submitButton( text = '변경사항을 적용합니다.',
icon = icon(name = 'refresh')),
helpText('위 버튼을 누르면 변경사항을 업데이트합니다.'),
dateInput(inputId = 'birth',
label = '생일을 입력하세요.',
value = '2000-01-01'),
dateRangeInput(inputId = 'period',
label = '기간을 선택하세요.'),
checkboxGroupInput(inputId = 'item',
label =  '관심사항을 모두 선택하세요',
choices = c('R', 'Python', '통계', '머신러닝'),
selected = NULL,
inline = TRUE),
selectInput(inputId = 'edu',
label = '최종학력을 선택하세요',
choices = c( '고졸' = 'H',
'대졸' = 'U',
'석사' = 'M',
'박사' = 'P'),
selected = "U",
multiple = FALSE),
varSelectInput(inputId = 'vars',
label = '칼럼을 선택하세요.',
data = iris,
selected = 'Sepal.Length',
multiple = TRUE),
radioButtons(inputId = 'major',
label = '전공을 선택하세요',
choices = c('통계학',
'산업공학',
'컴퓨터공학',
'기타'),
selected = NULL,
inline = FALSE),
fileInput(inputId = 'resume',
label = '이력서를 첨부해주세요.',
buttonLabel = '찾아보기',
placeholder = '아직 파일이 선택되지 않았습니다!'),
actionButton(inputId = 'do',
label = '클릭하세요!')
),
# 메인패널
mainPanel(
tabsetPanel(
type = 'tabs',
tabPanel(title = "profile", tableOutput(outputId = 'profile')),
tabPanel(title = "plot1", tableOutput(outputId = 'histogram')),
tabPanel(title = "plot2", tableOutput(outputId = 'boxplot'))
)
)
)
server <- function( input, output, session) {
output$user <- renderText({
str_c(input$name, '회원님!', sep='')
})
output$height <- renderPrint({
cat('입력하신 회원님의 키는', input$ht, '입니다!')
})
output$profile <- renderTable({
data.frame(name = input$name,
height = input$ht,
age = input$age)
})
output$histogram <- renderPlot({
heigths <- rnorm(n = input$ht,
mean = 172.4,
sd = 5.7)
hist(x = heigths,
breaks = 20,
col = 'gray50',
border = 'gray30')
})
output$boxplot <- renderPlot({
ggplot(data = iris, mapping = aes(y = !!input$vars[[1]])) +
geom_boxplot() + theme_bw()
})
output$mainUI <- renderUI({
if(input$name == '홍길동') {
tagList(
h5('[안내] 입력하시는 내용으로 변경됩니다.'),
tabPanel(title = 'profile'
,tableOutput(outputId = 'profile'))
)
} else {
tabsetPanel(
type = 'tabs',
tabPanel(title = "profile", tableOutput(outputId = 'profile')),
tabPanel(title = "plot1", tableOutput(outputId = 'histogram')),
tabPanel(title = "plot2", tableOutput(outputId = 'boxplot'))
)
}
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# 사이드 패널
sidebarPanel(
textInput( inputId = "name",
label = "이름을 입력하세요.",
value = "홍길동"),
passwordInput( inputId = "pw",
label = "비밀번호를 입력하세요.",
placeholder = "타인에게 노출되지 않도록 주의하세요"),
textAreaInput( inputId = "intro",
label = h3('자기소개 부탁합니다.'),
value = '',
row=3,
placeholder = "간단하게 작성해주세요."),
numericInput( inputId = "ht",
label = h4('키(cm)를 입력하세요.'),
value = 172.4,
min = 50,
max = 250 ),
sliderInput( inputId = "age",
label = "나이를 입력하세요.",
value = 25,
min = 1,
max = 120,
step = 1),
submitButton( text = '변경사항을 적용합니다.',
icon = icon(name = 'refresh')),
helpText('위 버튼을 누르면 변경사항을 업데이트합니다.'),
dateInput(inputId = 'birth',
label = '생일을 입력하세요.',
value = '2000-01-01'),
dateRangeInput(inputId = 'period',
label = '기간을 선택하세요.'),
checkboxGroupInput(inputId = 'item',
label =  '관심사항을 모두 선택하세요',
choices = c('R', 'Python', '통계', '머신러닝'),
selected = NULL,
inline = TRUE),
selectInput(inputId = 'edu',
label = '최종학력을 선택하세요',
choices = c( '고졸' = 'H',
'대졸' = 'U',
'석사' = 'M',
'박사' = 'P'),
selected = "U",
multiple = FALSE),
varSelectInput(inputId = 'vars',
label = '칼럼을 선택하세요.',
data = iris,
selected = 'Sepal.Length',
multiple = TRUE),
radioButtons(inputId = 'major',
label = '전공을 선택하세요',
choices = c('통계학',
'산업공학',
'컴퓨터공학',
'기타'),
selected = NULL,
inline = FALSE),
fileInput(inputId = 'resume',
label = '이력서를 첨부해주세요.',
buttonLabel = '찾아보기',
placeholder = '아직 파일이 선택되지 않았습니다!'),
actionButton(inputId = 'do',
label = '클릭하세요!')
),
# 메인패널
mainPanel(
uiOutput(outputId='mainUI')
)
)
server <- function( input, output, session) {
output$user <- renderText({
str_c(input$name, '회원님!', sep='')
})
output$height <- renderPrint({
cat('입력하신 회원님의 키는', input$ht, '입니다!')
})
output$profile <- renderTable({
data.frame(name = input$name,
height = input$ht,
age = input$age)
})
output$histogram <- renderPlot({
heigths <- rnorm(n = input$ht,
mean = 172.4,
sd = 5.7)
hist(x = heigths,
breaks = 20,
col = 'gray50',
border = 'gray30')
})
output$boxplot <- renderPlot({
ggplot(data = iris, mapping = aes(y = !!input$vars[[1]])) +
geom_boxplot() + theme_bw()
})
output$mainUI <- renderUI({
if(input$name == '홍길동') {
tagList(
h5('[안내] 입력하시는 내용으로 변경됩니다.'),
tabPanel(title = 'profile'
,tableOutput(outputId = 'profile'))
)
} else {
tabsetPanel(
type = 'tabs',
tabPanel(title = "profile", tableOutput(outputId = 'profile')),
tabPanel(title = "plot1", tableOutput(outputId = 'histogram')),
tabPanel(title = "plot2", tableOutput(outputId = 'boxplot'))
)
}
})
}
# run app
shinyApp(ui = ui, server = server)
# input layout
ui <- fluidPage(
# 사이드 패널
sidebarPanel(
textInput(inputId="name",
label="이름을 입력하세요.",
value="홍길동"),
numericInput(inputId="ht",
label=h4("키(cm)을 입력하세요."),
value=172.4,min=50,max=250),
sliderInput(inputId="age",
label="나이를 입력하세요.",
value=25,
min=1,
max=120,
step=1),
sliderInput(inputId='sample',
label='샘플 크기를 입력하세요.',
value=1000,
min=100,
max=5000,
step=100),
varSelectInput(inputId='vars',
label='칼럼을 선택하세요.',
data=iris,selected='Sepal.Length',
multiple=TRUE)
),
# 메인패널
mainPanel(
uiOutput(outputId='mainUI')
)
)
server <- function( input, output, session) {
output$profile <- renderTable({
data.frame(name=input$name,height=input$ht,age=input$age)
})
output$histogram <- renderPlot({
heights <- rnorm(n=input$ht,mean=172.4,sd=5.7)
hist(x=heights,breaks=20,col='gray50',border='gray30')
})
output$boxplot <- renderPlot({
ggplot(data=iris,mapping=aes(y=!!input$vars[[1]]))+ # !!는 shiny에서 지정한 데이터를 R로 사용하겠다
geom_boxplot()+theme_bw()
})
output$mainUI <- renderUI({
if(input$name=='홍길동'){
tagList(
h5('[안내] 입력하시는 내용으로 변경됩니다.'),
tabPanel(title='profile',tableOutput(outputId='profile'))
)
}else{
tabsetPanel(
type='tabs',
tabPanel(title='profile',tableOutput(outputId='profile')),
tabPanel(title='plot1',plotOutput(outputId='histogram')),
tabPanel(title='plot2',plotOutput(outputId='boxplot')))
}
})
}
# run app
shinyApp(ui = ui, server = server)
set.seed(12)
MA_1 <- arima.sim(list(order = c(0,0,1), ma = 0.9), n = 300)
MA_1
Arima(MA_1, order=c(0,0,1))
library(forecast)
Arima(MA_1, order=c(0,0,1))
ggtsdisplay(MA_1)
set.seed(12)
MA_1 <- arima.sim(list(order = c(0,0,1), ma = 0.6), n = 300)
Arima(MA_1, order=c(0,0,1))
ggtsdisplay(MA_1)
set.seed(12)
MA_1 <- arima.sim(list(order = c(0,0,1), ma = -0.8), n = 300)
Arima(MA_1, order=c(0,0,1))
ggtsdisplay(MA_1)
set.seed(12)
MA_1 <- arima.sim(list(order = c(0,0,1), ma = -0.5), n = 300)
Arima(MA_1, order=c(0,0,1))
ggtsdisplay(MA_1)
set.seed(12)
MA_1 <- arima.sim(list(order = c(0,0,1), ma = c(0.8, 0.3)), n = 300)
Arima(MA_1, order=c(0,0,1))
ggtsdisplay(MA_1)
MA_1
train <- window(MA_1, start=1, end=250)
test <- window(MA_1, start=251, end=300)
train
test
library(urca)
summary(ur.kpss(train))
Arima(train, order=c(0,0,1))
auto.arima(train)
Arima(MA_2, order=c(0,0,2))
MA_2 <- arima.sim(list(order = c(0,0,1), ma = 0.6), n = 300)
Arima(MA_2, order=c(0,0,2))
ggtsdisplay(MA_2)
set.seed(12)
MA_2 <- arima.sim(list(order = c(0,0,1), ma = 0.6), n = 300)
Arima(MA_2, order=c(0,0,2))
ggtsdisplay(MA_2)
checkresiduals(MA_1_fit)
MA_1_fit <- Arima(train, order=c(0,0,1))
checkresiduals(MA_1_fit)
Box.test(MA_1_fit$residuals, lag=10, type="Ljung-Box")
accuracy(meanf(train, h=50), test)
accuracy(naive(train, h=50), test)
arma_1_1 <- arima.sim(model = list(order=c(1,0,1), ar=0.7, ma=0.2), n = 200)
library(forecast)
ggtsdisplay(arma_1_1)
Arima(arma_1_1, order = c(1,0,1))
auto.arima(arma_1_1)
arma_1_1 <- arima.sim(model = list(order=c(1,0,1), ar=-0.7, ma=-0.2), n = 200)
ggtsdisplay(arma_1_1)
Arima(arma_1_1, order = c(1,0,1))
auto.arima(arma_1_1)
arma_1_1 <- arima.sim(model = list(order=c(1,0,1), ar=-0.7, ma=0.2), n = 200)
ggtsdisplay(arma_1_1)
Arima(arma_1_1, order = c(1,0,1))
auto.arima(arma_1_1)
set.seed(1234)
arma_2_1 <- arima.sim(model = list(order=c(2,0,1), ar=c(0.7,-0.6), ma=0.4), n = 300)
ggtsdisplay(arma_2_1)
Arima(arma_2_1, order=c(2, 0, 1))
auto.arima(arma_2_1)
set.seed(1234)
arma_1_2 <- arima.sim(model = list(order=c(1,0,2), ar=0.8, ma=c(0.3,-0.5)), n = 300)
ggtsdisplay(arma_1_2)
Arima(arma_1_2, order=c(1, 0, 2))
auto.arima(arma_1_2)
set.seed(1234)
arma_2_2 <- arima.sim(model = list(order=c(2,0,2), ar=0.8, ma=c(0.7,-0.6)), n = 300)
ggtsdisplay(arma_2_2)
Arima(arma_2_2, order=c(2, 0, 2))
auto.arima(arma_2_2)
arma_2_2 <- arima.sim(model = list(order=c(2,0,2), ar=0.8, ma=c(0.7,-0.6)), n = 300)
set.seed(1234)
arma_2_2 <- arima.sim(model = list(order=c(2,0,2), ar=c(0.7, -0.6), ma=c(0.3,-0.5)), n = 300)
ggtsdisplay(arma_2_2)
Arima(arma_2_2, order=c(2, 0, 2))
auto.arima(arma_2_2)
install.packages("keras")
library(keras)
install_keras()
Y
library(keras)
mnist <- dataset_mnist()
mnist
train_images <- mnist$train$x
train_labels <- mnist$train$y
train_images
train_labels
set.seed(1234)
arima_1_1_1 <- arima.sim(model=list(order=c(1,1,1), ar=0.7, ma=-0.2), n=300)
arima_1_1_1
library(forecast)
ggtsdisplay(arima_1_1_1)
arima_F <- forecast(arima_fit)
setwd("C:/Users/gksxo/Desktop/순천향대학교/2학년2학기(3학년_4학년수업)/시계열분석/data/data_ARIMA_DIY/data_ARIMA_DIY.csv")
setwd("C:/Users/gksxo/Desktop/순천향대학교/2학년2학기(3학년_4학년수업)/시계열분석/data/data_ARIMA_DIY/data_ARIMA_DIY.csv")
setwd("C:/Users/gksxo/Desktop/순천향대학교/2학년2학기(3학년_4학년수업)/시계열분석/data/data_ARIMA_DIY/data_ARIMA_DIY.csv")
#------------------------------------------------------------------#
# install.packages("shiny")
# install.packages("shinydashboard")
# install.packages("tidyverse")
# install.packages("DT")
# install.packages("pracma")
# install.packages("seewave")
# install.packages("changepoint")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(DT)
# library(pracma)
# library(seewave)
# library(changepoint)
library(visNetwork)
#------------------------------------------------------------------#
# EDGE_DATA <- read_csv("./data/EDGE_DATA.csv")
# NODES_DATA <- read_csv("./data/NODES_DATA.csv")
setwd("C:/shinyApp/shinyAppLOL")
load( "./LOLVisNetwork/.RData" )
# makeSelectList <- function(line)
# {
#
#   dataFrame1 <- NODES_DATA %>%
#     filter(str_detect(group, line)) %>%
#     select(id)
#
#   dataFrame2 <- NODES_DATA %>%
#     filter(str_detect(group,  line)) %>%
#     select(label)
#
#   resultList <- c(dataFrame1$id)
#   names(resultList) <- dataFrame2$label
#
#   return(resultList)
# }
# # make select filter list
# TopLineChamp <- makeSelectList("T")
# MinLineChamp <- makeSelectList("M")
# JungleLineChamp <- makeSelectList("J")
# BotLineChamp <- makeSelectList("A")
# SupportLineChamp <- makeSelectList("S")
#------------------------------------------------------------------#
# save.image(file = ".RData")
# setwd("C:/Users/gksxo/Desktop/Project/github/social_network_project/TaeGyu/OPGG/shinyApp")
runApp("LOLVisNetwork")
#------------------------------------------------------------------#
